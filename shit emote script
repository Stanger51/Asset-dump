--emote as killer FORSAKEN and extra fun stuff
function ChangeSprintStats(SSPEED)
    local FindStats = game:GetService("ReplicatedStorage").Systems.Character.Game.Sprinting
    local m = require(FindStats)
  
    m.SprintSpeed = SSPEED
end

function HumanoidChange(JPOWER)

    local Player = game:GetService("Players").LocalPlayer

    for _, v in pairs(game.Workspace.Players.Survivors:GetChildren()) do
        local playerAttribute = v:GetAttribute("Username") 
        child = v
        
        if playerAttribute == Player or playerAttribute == Player.Name then
            Parent1 = child.Parent
            
            child.Humanoid.JumpPower = JPOWER
        end
    end

end



local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "The edge streak",
    Icon = 13472993735, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Loading astolfo feet pics...",
    LoadingSubtitle = "by Stanger",
    Theme = "AmberGlow", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = false,
       FolderName = nil, -- Create a custom folder for your hub/game
       FileName = "Big Hub"
    },
 
    Discord = {
       Enabled = false, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "noinvitelink", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = false, -- Set this to true to use our key system
    KeySettings = {
       Title = "Untitled",
       Subtitle = "Key System",
       Note = "No method of obtaining the key is provided", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"Hello"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

 local Tab = Window:CreateTab("Emotes", 13472993735) -- Title, Image
 local Section = Tab:CreateSection("Emotes")
 local Button = Tab:CreateButton({
    Name = "Wait",
    Callback = function()
        local args = {
            [1] = "PlayEmote",
            [2] = "Animations",
            [3] = "Wait"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
        
    end,
 })

 local Button = Tab:CreateButton({
    Name = "The phone",
    Callback = function()
        local args = {
            [1] = "PlayEmote",
            [2] = "Animations",
            [3] = "ThePhone"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
        
    end,
 })

 local Button = Tab:CreateButton({
    Name = "Locked",
    Callback = function()
        local args = {
            [1] = "PlayEmote",
            [2] = "Animations",
            [3] = "Locked"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
        
    end,
 })

 local Button = Tab:CreateButton({
    Name = "Tick Tock",
    Callback = function()
        local args = {
            [1] = "PlayEmote",
            [2] = "Animations",
            [3] = "TickTock"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
        
    end,
 })

 local Button = Tab:CreateButton({
    Name = "California Girls",
    Callback = function()
        local args = {
            [1] = "PlayEmote",
            [2] = "Animations",
            [3] = "CaliforniaGirls"
        }
        
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Network"):WaitForChild("RemoteEvent"):FireServer(unpack(args))
        
    end,
 })




 local Keybind = Tab:CreateKeybind({
    Name = "Kill rayfield",
    CurrentKeybind = "P",
    HoldToInteract = false,
    Flag = "Keybind1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Keybind)
        Rayfield:Destroy()
    end,
 })

 local Tab = Window:CreateTab("Extra", 13472993735) -- Title, Image
 local Section = Tab:CreateSection("idfk know to type here")

 local Toggle = Tab:CreateToggle({
    Name = "Inf stam",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(ISTAMINAON)
        local ChildEat = game:GetService("ReplicatedStorage").Systems.Character.Game.Sprinting
        m = require(ChildEat)
        if ISTAMINAON == true then
        m.StaminaLossDisabled = true 
        else
            m.StaminaLossDisabled = false 
        end
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Aimbot c00lkidd",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(AIMBOTON)
        
        
        if AIMBOTON == true then
            game:GetService("Players").LocalPlayer:SetAttribute("Device","Mobile")
        else
            game:GetService("Players").LocalPlayer:SetAttribute("Device","PC")
        end
    end,
 })
 
 local Toggle = Tab:CreateToggle({
    Name = "Hard mode",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        local HARDMODE = game:GetService("ReplicatedStorage").Systems.Character.Game.Sprinting
        m = require(HARDMODE)
    m.SprintSpeed = 20
    m.StaminaLoss = 30
    m.StaminaGain = 25
    end,
 })
 
 local Button = Tab:CreateButton({
    Name = "Open inf yield",
    Interact = 'Click',
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source"))()
    end,
 })

 local Toggle = Tab:CreateToggle({
    Name = "Flex",
    CurrentValue = false,
    Flag = "Toggle1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Value)
        game:GetService("Players").localPlayer.PlayerData.Achievements.KillersMilestones.JasonMilestone.Value = 100
        game:GetService("Players").localPlayer.PlayerData.Achievements.KillersMilestones.JohnDoeMilestone.Value = 100
        game:GetService("Players").localPlayer.PlayerData.Achievements.KillersMilestones.c00lkiddMilestone.Value = 100
        game:GetService("Players").localPlayer.PlayerData.Achievements.KillersMilestones["1x1x1x1Milestone"].Value = 100
        
        game:GetService("Players").localPlayer.PlayerData.Achievements.SurvivorsMilestones["007n7Milestone"].Value = 100
        game:GetService("Players").localPlayer.PlayerData.Achievements.SurvivorsMilestones["BuildermanMilestone"].Value = 100
        game:GetService("Players").localPlayer.PlayerData.Achievements.SurvivorsMilestones["ChanceMilestone"].Value = 100
        game:GetService("Players").localPlayer.PlayerData.Achievements.SurvivorsMilestones["ElliotMilestone"].Value = 100
        game:GetService("Players").localPlayer.PlayerData.Achievements.SurvivorsMilestones["Guest1337Milestone"].Value = 100
        game:GetService("Players").localPlayer.PlayerData.Achievements.SurvivorsMilestones["NoobMilestone"].Value = 100
        game:GetService("Players").localPlayer.PlayerData.Achievements.SurvivorsMilestones["ShedletskyMilestone"].Value = 100
        game:GetService("Players").localPlayer.PlayerData.Achievements.SurvivorsMilestones["TwoTimeMilestone"].Value = 100
        game:GetService("Players").localPlayer.leaderstats["Money"].Value = 100000
    end,
 })

 local Slider = Tab:CreateSlider({
    Name = "Gravity",
    Range = {-50, 500},
    Increment = 10,
    Suffix = "?",
    CurrentValue = 190,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(GRAVFIND)
game.Workspace.Gravity = GRAVFIND
    end,
 })

 local Slider = Tab:CreateSlider({
    Name = "JumpPower",
    Range = {-50, 500},
    Increment = 10,
    Suffix = "?",
    CurrentValue = 190,
    Flag = "Slider1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(WantedJPower)
        HumanoidChange(WantedJPower)
    end,
 })

 local Input = Tab:CreateInput({
    Name = "Sprint speed",
    PlaceholderText = "",
    NumbersOnly = true, -- If the user can only type numbers. Remove or set to false if none.
    CharacterLimit = 5, --max character limit. Remove or set to false
    OnEnter = true, -- Will callback only if the user pressed ENTER while being focused on the the box.
    RemoveTextAfterFocusLost = false, -- Speaks for itself.
    Callback = function(InputSspeed)
        ChangeSprintStats(InputSspeed,_,_)
    end,
 })
 
